# Use a slim Python base image
FROM python:3.9-slim-buster

# Set the working directory in the container
WORKDIR /app

# Copy requirements.txt and install dependencies
# This is done first to leverage Docker layer caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Create the models directory inside the container
RUN mkdir -p models
# Create the src directory inside the container
RUN mkdir -p src

# Copy the rest of your application code
# train.py is expected in /app (root of WORKDIR)
COPY train.py .
# predict.py is expected in /app/src/
COPY predict.py src/

# You might also need to copy a pre-existing models/ directory if not generated by train.py
# If train.py generates the model, ensure it saves to /app/models inside the container.
# If you have pre-existing models or data, copy them like this:
# COPY models/ models/

# If predict.py relies on any data files directly in models/, you need to ensure they exist
# either by copying them, or by train.py generating them.

# Command to run when the container starts (optional, for default behavior)
# This will be overridden by the `docker run ... python src/predict.py` in CI
CMD ["python", "src/predict.py"]