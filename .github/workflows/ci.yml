# .github/workflows/ci.yml

# ... (other parts of your workflow) ...

jobs:
  build_and_test_container:
    runs-on: ubuntu-latest
    steps:
      - name: Set up job
        uses: actions/checkout@v4 # Use v4 for latest features and security
        with:
          fetch-depth: 0 # Needed for some actions, good practice for full history

      - name: Checkout repository code
        uses: actions/checkout@v4 # Use v4 for latest features and security

      - name: Set up Python environment and install dependencies
        uses: actions/setup-python@v5 # Use v5 for latest Python setup
        with:
          python-version: '3.9' # Or the specific Python version your project uses

      - name: Run pip install -r requirements.txt
        run: pip install -r requirements.txt

      - name: Run train.py to generate model file
        run: python train.py
        working-directory: ./ # Ensure this is correct for your train.py location

      - name: Login to Docker Hub
        uses: docker/login-action@v3 # Use v3 for latest version of login action
        with:
          username: akash171
          password: dckr_pat_4tkfgJT01XeSD0Xm8onFc1Vj6UI # Use the secret for the token
          # Remove 'ecr: auto' if you are not using AWS ECR
          # logout: true # This is fine, ensures logout after job completion

      - name: Build and tag Docker image
        # Assuming your Dockerfile is named 'Dockerfile' (without .txt extension)
        # and located in the root of your repository.
        run: |
          docker build -t akash171/mlops_assignment_3:latest .
          docker push akash171/mlops_assignment_3:latest
        # Add a step to push the image to Docker Hub after building

      - name: Run Docker container for verification
        # This step will depend on how you want to verify your container.
        # For example, if it's a web service, you might curl it.
        # If it's a script that runs and exits, you can just run it.
        run: |
          # Example: Run the container and check if it starts without error
          docker run --rm akash171/mlops_assignment_3:latest python predict.py
          # Or if it's a web service:
          # docker run -d -p 8000:8000 --name my_app akash171/mlops_assignment_3:latest
          # sleep 10 # Give time for the service to start
          # curl http://localhost:8000/predict # Or your specific endpoint
          # docker stop my_app